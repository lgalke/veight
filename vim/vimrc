set nocompatible
" runtime core/vim-pathogen/autoload/pathogen.vim
" execute pathogen#infect('core/{}', 'extra/{}', 'community/{}', 'testing/{}')
syntax on
filetype plugin indent on

" Section: Basic Options {{{
set autowrite
set foldmethod=marker
set showtabline=2
set guioptions-=e "recommended by flagship
set ignorecase smartcase
set showcmd
set showmatch
set wrap
set list
set number relativenumber
set listchars=eol:¶,tab:¦-,trail:¸,extends:»,precedes:«,nbsp:±
" better default comment string for a lot of configuratoin files
set commentstring=#\ %s
"LineNr
set noruler
"makes statusline col indicator always display in line
set signcolumn=yes
" %=%-14.(%l,%c%V%)\ %P
if has('persistent_undo')
  set undofile	" keep an undo file (undo changes after closing)
endif

" wild menu
" typescript development
set wildignore+=*.js,*.map

" }}}
" Section: Maps {{{
if has('conceal')
  set conceallevel=2 concealcursor=
endif

let mapleader = ","
let maplocalleader = "\\"

" movement
nnoremap H ^
nnoremap L $
" command line
nnoremap + :
nnoremap @+ @:
" modes
" Convenience
vnoremap <Space> I<Space><Esc>gv
nnoremap <Space> za
inoremap <C-C> <Esc>`^
nnoremap <C-S> :w<cr>

"Quick access
nnoremap <leader>vv :Vedit vimrc<cr>
nnoremap <leader>vm :Vedit vimrc<cr>
"}}}
" Section: Autocmds {{{
augroup veight
  au!
  autocmd FileType help nnoremap <buffer> q :q!<cr>
  autocmd FileType mail setlocal formatoptions+=aw
  autocmd FileType pandoc let b:dispatch=":Pandoc! pdf"
  autocmd BufReadPost * if getline(1) =~# '^#!' | let b:dispatch = getline(1)[2:-1] . ' %' | let b:start = b:dispatch | endif
augroup END

" }}}
" Section: Core {{{
" Markdown {{{
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
" }}}
" Flagship {{{
" cursorline
set statusline=%#CursorLineNr#%3.3c%*
" buffer number and modified
set statusline+=\ %N%M
" file
set statusline+=\ %f\ %(@%{fugitive#head()}%)
" usual stuff
set statusline+=\ %H%R
set statusline+=%=
augroup veight_flagship
  au!
  " this is necessary because (vim-signify|vim-gitgutter) somehow breaks colors
  let hl_as_usual = {"hl": ['Statusline', 'StatusLineNC']}
  " autocmd User Flags call Hoist("buffer", -10, hl_as_usual, function('fugitive#statusline'))
  autocmd User Flags call Hoist("window", +10, {"hl": ['WarningMsg','StatusLineNC']}, 'SyntasticStatuslineFlag')
  autocmd User Flags call Hoist("buffer", 0, hl_as_usual, '%{g:asyncrun_status}')
  autocmd User Flags call Hoist("window", -10, hl_as_usual, "%{tagbar#currenttag('[%s]', '')}")
augroup END
" }}}
" Fugitive {{{
nmap <leader>gs :Gstatus<cr>
nmap <leader>gw :Gwrite<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gp :Gpush<cr>
nmap <leader>gf :Gfetch<cr>
nmap <leader>gm :Gmerge<cr>
" }}}
" Tabular {{{
nnoremap <leader>t= :Tabularize /=/
nnoremap <leader>t& :Tabularize /&/
" }}}
" CtrlP {{{
let g:ctrlp_map = '<leader>,'
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
let g:ctrlp_extensions = ['tag']
" }}}
" }}}
" Section: Extra {{{
" PyMode{{{
let g:pymode_indent = 0
" }}}
" Dispatch {{{
nnoremap <leader>m :Make<cr>
nnoremap <leader>d :Dispatch<cr>
" }}}
" Ragtag {{{
let g:ragtag_global_maps = 1
" }}}
" Vimtex {{{
let g:vimtex_latexmk_continuous = 0
let g:vimtex_latexmk_background = 1
let g:vimtex_latexmk_callback = 0

" let g:vimtex_imaps_leader = '`'

let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'

let g:vimtex_fold_enabled = 1
let g:vimtex_fold_preamble = 1
let g:vimtex_fold_comments = 1
let g:vimtex_indent_enabled = 1
let g:vimtex_indent_bib_enabled = 1
let g:vimtex_format_enabled = 1 " this did not work well, recheck if fixed
augroup vimtex_mappings
  au!
  au User VimtexEventInitPost nmap <F3> <plug>(vimtex-toc-toggle)
augroup END
" }}}
" Syntastic {{{
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0
let g:syntastic_auto_jump                = 0
" dont clutter the loc list
let g:syntastic_always_populate_loc_list = 0
let g:loc_list_height                    = 5
let g:syntastic_aggregate_errors         = 1
let g:syntastic_id_checkers              = 1
let g:syntastic_auto_loc_list            = 0
" invoke error loc list manually
nmap <silent> <leader>e :Errors<CR>
" tex checker
let g:syntastic_tex_checkers = ["chktex", "lacheck"]
" 1: Cmd terminated with space
" 8: Wrong type of dashes
" 36: spaces around braces
let g:syntastic_tex_chktex_args = "-n1 -n8 -n36"
" python checker
let g:syntastic_python_checkers = ['python', 'flake8']
let g:syntastic_python_python_exec = '/usr/bin/python3'
let g:syntastic_python_flake8_exec = '/usr/bin/python3'
let g:syntastic_python_flake8_args = '-m flake8 --ignore=E501,E203'
" }}}
" }}}
" Section: Community {{{
" dotoo
let g:dotoo#agenda#files = ['~/.plan/*.dotoo', '~/git/vec4ir/vec4ir.dotoo']
" pandoc
let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#filetypes#handled = ["pandoc"]
let g:pandoc#modules#disabled = ["menu"]
let g:pandoc#syntax#conceal#urls = 1
" }}}
" Section: Testing {{{
" Signify {{{
let g:signify_vcs_list = [ 'git' ]
let g:signify_line_highlight = 0
" }}}
" TagBar {{{
nmap <F2> :TagbarToggle<CR>
" }}}
" VimCompletesMe + vimtex {{{
augroup VimCompletesMeTex
  autocmd!
  autocmd FileType tex let b:vcm_omni_pattern =
        \ '\v\\%('
        \ . '\a*cite\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|\a*ref%(\s*\{[^}]*|range\s*\{[^,}]*%(}\{)?)'
        \ . '|hyperref\s*\[[^]]*'
        \ . '|includegraphics\*?%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|%(include%(only)?|input)\s*\{[^}]*'
        \ . '|\a*(gls|Gls|GLS)(pl)?\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|includepdf%(\s*\[[^]]*\])?\s*\{[^}]*'
        \ . '|includestandalone%(\s*\[[^]]*\])?\s*\{[^}]*'
        \ . ')'
augroup END
" }}}
" }}}

set background=dark
silent! colo badwolf
